<template>
  <div class="ui container">
    <collapse accordion>
      <collapse-item title="Search" actived>
        <filter-bar></filter-bar>
      </collapse-item>
      <collapse-item title="Add/Delete/Export" actived>
        <div class="column is-5 is-horizontal">          
          <router-link v-bind:to="'<%- name -%>'" class="button is-primary">
            <button class="button is-primary">Add <%- name -%></button>
          </router-link>
          <button class="button is-primary" v-on:click="onDelete">Delete</button>       
          <div id="demo" class="column is-3">
            <input type="radio" name="export-type" value="cvs" v-model="exportType" />
            <input type="radio" name="export-type" value="excel" v-model="exportType" />
            {{ exportType }}
          </div>
          <a :href="downloadExcelUrl" class="button is-primary" :class="activeClass" download>Export</a>
        </div>       
      </collapse-item>
    </collapse>

    <vuetable ref="vuetable"
      api-url="<%- baseUrl -%>/<%- namePlLc -%>/vue_table"
      :fields="fields"
      pagination-path=""
      :per-page="20"
      detail-row-component="<%- nameLc -%>-detail-row"
      :appendParams="moreParams"
      @vuetable:pagination-data="onPaginationData"
      @vuetable:cell-clicked="onCellClicked"
      @vuetable:checkbox-toggled="onCheckBoxClicked"
      @vuetable:checkbox-toggled-all="onSelectAllClicked"
    ></vuetable>
    <div class="vuetable-pagination ui basic segment grid">
      <vuetable-pagination-info ref="paginationInfo"
      ></vuetable-pagination-info>
      <vuetable-pagination ref="pagination"
        @vuetable-pagination:change-page="onChangePage"
      ></vuetable-pagination>
    </div>
  </div>
</template>

<script>
import Vuetable from 'vuetable-2/src/components/Vuetable.vue'
import VuetablePagination from 'vuetable-2/src/components/VuetablePagination.vue'
import VuetablePaginationInfo from 'vuetable-2/src/components/VuetablePaginationInfo.vue'
import <%- name -%>CustomActions from './<%- name -%>CustomActions.vue'
import <%- name -%>DetailRow from './<%- name -%>DetailRow.vue'
import FilterBar from './FilterBar.vue'

import ExtendedSearchBar from './ExtendedSearchBar.vue'

import axios from 'axios'

import Vue from 'vue'
import VueEvents from 'vue-events'
Vue.use(VueEvents)

Vue.component('<%- nameLc -%>-custom-actions', <%- name -%>CustomActions)
Vue.component('<%- nameLc -%>-detail-row', <%- name -%>DetailRow)
Vue.component('filter-bar', FilterBar)

Vue.component('extended-search-bar', ExtendedSearchBar)

export default {
  components: {
    Vuetable,
    VuetablePagination,
    VuetablePaginationInfo,
    <%- name -%>DetailRow
  },
  data() {
    return {
      fields: [{
          name: 'id',
          title: '#',
          titleClass: 'center aligned',
          dataClass: 'right aligned'
        },
        {
          name: '__checkbox',
          titleClass: 'center aligned',
          dataClass: 'center aligned'
        },
        <% for ( i=0; i<attributesArr.length; i++ ) { -%>
          {
            name: '<%- attributesArr[i][0] -%>',
            sortField: '<%- attributesArr[i][0] -%>'
          },
        <% } -%>
        {
          name: '__component:<%- nameLc -%>-custom-actions',
          title: 'Actions',
          titleClass: 'center aligned',
          dataClass: 'center aligned'
        }
      ],
      moreParams: {},
      downloadExcelUrl: '',
      activeClass: 'is-disabled',
      exportType: "cvs"
    }
  },
  watch: {
    exportType: function(newRole){
      this.downloadFile();
    }
  },
  methods: {
    onPaginationData(paginationData) {
      this.$refs.pagination.setPaginationData(paginationData)
      this.$refs.paginationInfo.setPaginationData(paginationData)
    },
    onChangePage(page) {
      this.$refs.vuetable.changePage(page)
    },
    onCellClicked(data, field, event) {
      this.$refs.vuetable.toggleDetailRow(data.id)
    },
    onFilterSet(filterText) {
      this.moreParams = {
        'filter': filterText.trim()
      }
      Vue.nextTick(() => this.$refs.vuetable.refresh())
    },
    onFilterReset() {
      this.moreParams = {}
      Vue.nextTick(() => this.$refs.vuetable.refresh())
    },
    onDelete() {
      if (window.confirm("Do you really want to delete <%- namePlLc -%> of ids '" + this.$refs.vuetable.selectedTo.join("; ") + "'?")) {
        var t = this;
        var url = this.$baseUrl() + '/<%- name -%>/' + this.$refs.vuetable.selectedTo.join("/")
        axios.delete(url).then(function(response) {
          t.$refs.vuetable.refresh()
        }).catch(function(error) {
          t.error = error
        })
      }

    },
    onCheckBoxClicked() {
      this.downloadFile();   
    },
    onSelectAllClicked() {
      this.downloadFile();
    },
    downloadFile() {
      if(this.$refs.vuetable.selectedTo.length > 0) {
        this.activeClass = 'is-active';
        var urlToExportFile = this.$baseUrl() + '/<%- namePlLc -%>/example_csv' + '?array=[' + this.$refs.vuetable.selectedTo.join(",") + ']';
        if(this.exportType === 'excel'){
          urlToExportFile = this.$baseUrl() + '/<%- namePlLc -%>/example_csv' + '?excel=true&array=[' + this.$refs.vuetable.selectedTo.join(",") + ']';
        }
        this.downloadExcelUrl = urlToExportFile
      }
      else {
        this.activeClass = 'is-disabled';
        this.downloadExcelUrl = ''
      }
    }
  },
  mounted() {
    this.$events.$on('filter-set', eventData => this.onFilterSet(eventData))
    this.$events.$on('filter-reset', e => this.onFilterReset())

    this.$events.$on('extended-filter-set', eventData => this.onExtendedFilterSet(eventData))
  }
}
</script>
