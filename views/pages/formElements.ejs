<template>
  <div id="<%- nameLc -%>-form-elemns-div">

  <input type="hidden" v-model="<%- nameLc -%>.id"/>
  
  <% for ( i=0; i<attributesArr.length; i++ ) { -%>

    <div id="<%- nameLc -%>-<%- attributesArr[i][0] -%>-div" class="form-group">
      <% let iterAttr = attributesArr[i] -%>
      <label><%- iterAttr[0] -%></label>
      <% include ../partials/input %>
      <div id="<%- nameLc -%>-<%- iterAttr[0] -%>-err" v-if="validationError('<%- iterAttr[0] -%>')" class="alert alert-danger">
        {{validationError('<%- iterAttr[0] -%>').message}}
      </div>
    </div>

  <% } -%>

  <% for ( i=0; i<belongsTosArr.length; i++ ) { -%>
    <% var bt = belongsTosArr[i] -%>

    <div id="<%- nameLc -%>-<%- bt.targetModelLc -%>-div" class="form-group">
      <label><%- bt.relationName -%></label>
      <foreign-key-form-element
        :searchUrl = "this.$baseUrl() + '/<%- bt.targetModelPlLc -%>'"
        v-model:foreignKey="<%- nameLc -%>.<%- bt.foreignKey -%>"
        label="<%- bt.label -%>"
        <% if (typeof bt.subLabel !== 'undefined' && bt.subLabel !== null) { -%>
        subLabel="<%- bt.subLabel -%>"
        <% } -%>
        valueKey="<%- bt.primaryKey -%>"
        v-bind:initialInput="<%- bt.targetModelLc -%>InitialLabel">
      </foreign-key-form-element>
    </div>

  <% } -%>


  <% for ( i=0; i<hasManysArr.length; i++ ) { -%>
    <% var manyRel = hasManysArr[i] -%>

    <div id="<%- nameLc -%>-<%- manyRel.relationName -%>-div" class="form-group">
      <label><%- manyRel.relationName -%></label>
      <has-many-form-element
        :associatedElements.sync="metabolite_measurement.samples"
        :searchUrl="this.$baseUrl() + '<%- manyRel.targetModelPlLc -%>'"
        label="<%- manyRel.label -%>"
        subLabel="<%- manyRel.subLabel -%>"
        valueKey="id">
      </has-many-form-element>
    </div>

  <% } -%>

  
  </div>
</template>

<script>
<% if (typeof belongsTosArr !== undefined && belongsTosArr.length > 0 ||
  typeof hasManysArr !== undefined && hasManysArr.length > 0) { -%>
import Vue from 'vue'
<% } -%>

<% if (typeof belongsTosArr !== 'undefined' && belongsTosArr.length > 0) { -%>
import foreignKeyFormElement from './foreignKeyFormElement.vue'

Vue.component('foreign-key-form-element', foreignKeyFormElement)
<% } -%>

<% if (typeof hasManysArr !== 'undefined' && hasManysArr.length > 0) { -%>
import hasManyFormElemn from './hasManyFormElemn.vue'

Vue.component('has-many-form-element', hasManyFormElemn)
<% } -%>

export default {
  props: [ '<%- nameLc -%>', 'errors' ],
  computed: {
  <% for ( i=0; i<belongsTosArr.length; i++ ) { -%>
    <% var bt = belongsTosArr[i] -%>
    <%- bt.targetModelLc -%>InitialLabel: function () {
      var x = this.<%- nameLc -%>.<%- bt.relationName %>
      if (x !== null && typeof x === 'object' &&
          x['<%- bt.label -%>'] !== null &&
          typeof x['<%- bt.label -%>'] !== 'undefined') {
        return x['<%- bt.label -%>']
      } else {
        return ''
      }
    }
    <% if (i < (belongsTosArr.length - 1)) { -%>
    ,
    <% } -%>
  <% } -%>
  },
  methods: {
    validationError(modelField) {
      if (this.errors == null) return false;
      return this.errors.find(function (el) {
        return el.path === modelField
      })
    }
  },
	mounted: function() {
    let el = this;
    $(document).ready(function(){
      $('.datepicker').datepicker({
        format: el.$defaultDateFormat(),
        dateFormat: el.$defaultDateFormat()
      })
    })
	}
}
</script>
